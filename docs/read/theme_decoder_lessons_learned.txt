

 1.FileSystem


// ❌ NEVER do this
File directory = File('/path/to/directory');
if (directory.existsSync()) { /* Wrong! */ }

// ✅ ALWAYS match types correctly
Directory directory = Directory('/path/to/directory');
if (directory.existsSync()) { /* Correct! */ }

File file = File('/path/to/file.txt');
if (file.existsSync()) { /* Correct! */ }

Precautions:
Always use Directory class for directory operations
Always use File class for file operations
Never mix file system entity types
Use FileSystemEntity.isDirectorySync() for type checking


 2.JSON 

 // ❌ DANGEROUS - No type validation
final data = jsonDecode(jsonString);
final result = SomeClass.fromJson(data);

// ✅ SAFE - Always validate and preprocess
final data = jsonDecode(jsonString);
if (data is! Map<String, dynamic>) {
  throw ArgumentError('Expected JSON object, got ${data.runtimeType}');
}

// Preprocess if needed (e.g., color conversion)
final processedData = HexColorConverter.convertHexColorsInJson(data);
final result = SomeClass.fromJson(processedData);

Precautions:
Always validate JSON structure before deserialization
Preprocess data when types don't match expected format
Use type-safe casting with validation
Handle parsing exceptions gracefully

3. Type Safety & Generics

// ❌ RISKY - Type inference can fail
final list = [];
final map = {};

// ✅ EXPLICIT - Always specify types
final list = <String>[];
final map = <String, dynamic>{};

// ❌ UNSAFE - Direct casting
final items = data['items'] as List;

// ✅ SAFE - Type-checked casting
final items = (data['items'] as List<dynamic>)
    .cast<Map<String, dynamic>>();

Precautions:
Always specify generic types explicitly
Use type-safe casting with validation
Never assume type inference will work
Test with empty collections

4. Error Handling

// ❌ POOR - Vague error messages
throw Exception('Error occurred');

// ✅ EXCELLENT - Descriptive, actionable errors
throw ArgumentError(
  'Invalid hex color format: "$hex". '
  'Expected format: #RRGGBB or #AARRGGBB. '
  'Example: #FF0000 for red.',
);

Precautions:
Always provide context in error messages
Include expected formats and examples
Wrap risky operations in try-catch blocks
Log errors with sufficient detail for debugging








