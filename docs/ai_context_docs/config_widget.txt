You are a senior Flutter developer working on scalable design systems.

I have an existing reusable Flutter widget. I want you to **extract all visual constants** (like padding, text styles, colors, borderRadius, spacing, durations, curves, sizes, etc.) into a dedicated config class — but do **not modify any logic, layout, structure, or interactions** in the widget.

### ✅ Your Task:

1. Create a `WidgetNameConfig` class that includes:
   - All fixed values (colors, padding, spacing, radius, durations, curves, sizes, text styles, etc.)
   - Proper naming (`backgroundColor`, `textStyle`, `hoverBorderColor`, etc.)
   - Inline comments or doc comments (`///`) explaining each variable's purpose
   - A `factory WidgetNameConfig.defaultConfig(BuildContext context)` to pull values from `AppTheme.of(context)` or `Theme.of(context)` if needed

2. Update the existing widget:
   - Inject the `config` via constructor (required)
   - Replace all hardcoded styling with `config` values
   - Keep **everything else exactly the same**: structure, logic, method signatures, widget tree, hooks, etc.

### ❗Rules:
- No layout rewrites
- No renaming functions or classes
- No logic changes
- Just extract constants → config
- Add doc comments (`///`) to config fields for clarity

---
and in the end review this widget from industry ex

### ✅ Example Input Widget to Transform:
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:theme_ui_widgets/theme/app_theme.dart';

// =============================================================================
// CONFIG CLASS FOR STYLING
// =============================================================================

class SidebarItemWidgetConfig {
  const SidebarItemWidgetConfig({
    // Layout
    required this.padding,
    required this.borderRadius,
    required this.spacing,
    required this.iconSize,

    // Colors - Normal State
    required this.backgroundColor,
    required this.borderColor,
    required this.textColor,

    // Colors - Hover State
    required this.hoverBackgroundColor,
    required this.hoverBorderColor,
    required this.hoverTextColor,

    // Colors - Selected State
    required this.selectedBackgroundColor,
    required this.selectedBorderColor,
    required this.selectedTextColor,

    // Colors - Disabled State
    required this.disabledBackgroundColor,
    required this.disabledBorderColor,
    required this.disabledTextColor,

    // Focus Ring
    required this.focusRingColor,

    // Text Styles
    required this.textStyleNormal,
    required this.textStyleHover,
    required this.textStyleSelected,
    required this.textStyleDisabled,

    // Animation
    required this.animationDuration,
    required this.animationCurve,
  });

  /// Default config based on AppThemeData from context
  factory SidebarItemWidgetConfig.defaultConfig(BuildContext context) {
    final theme = AppTheme.of(context); // Get full AppThemeData
    final fill = theme.fillColorScheme;
    final text = theme.textColorScheme;

    return SidebarItemWidgetConfig(
      // Layout
      padding: const EdgeInsets.all(12),
      borderRadius: theme.borderRadius.m,
      spacing: theme.spacing.m,
      iconSize: 20,

      // Colors - Normal
      backgroundColor: Colors.transparent,
      borderColor: Colors.transparent,
      textColor: text.primary,

      // Colors - Hover
      hoverBackgroundColor: fill.primaryHover,
      hoverBorderColor: Colors.transparent,
      hoverTextColor: text.primary,

      // Colors - Selected
      selectedBackgroundColor: fill.themeSelect,
      selectedBorderColor: Colors.transparent,
      selectedTextColor: text.primary,

      // Colors - Disabled
      disabledBackgroundColor: Colors.transparent,
      disabledBorderColor: Colors.transparent,
      disabledTextColor: text.quaternary,

      // Focus Ring
      focusRingColor: fill.themeThick,

      // Text Styles - AppTheme now contains user's font choice
      textStyleNormal:
          theme.textStyle.labelLarge.standard(context: context, color: text.primary),
      textStyleHover:
          theme.textStyle.labelLarge.standard(context: context, color: text.primary),
      textStyleSelected:
          theme.textStyle.labelLarge.standard(context: context, color: text.primary),
      textStyleDisabled:
          theme.textStyle.labelLarge.standard(context: context, color: text.quaternary),

      // Animation
      animationDuration: const Duration(milliseconds: 200),
      animationCurve: Curves.easeInOut,
    );
  }

  // Layout Properties
  final EdgeInsetsGeometry padding;
  final double borderRadius;
  final double spacing;
  final double iconSize;

  // Background / Border / Text Colors
  final Color backgroundColor;
  final Color borderColor;
  final Color textColor;

  final Color hoverBackgroundColor;
  final Color hoverBorderColor;
  final Color hoverTextColor;

  final Color selectedBackgroundColor;
  final Color selectedBorderColor;
  final Color selectedTextColor;

  final Color disabledBackgroundColor;
  final Color disabledBorderColor;
  final Color disabledTextColor;

  final Color focusRingColor;

  // Text Styles per State
  final TextStyle textStyleNormal;
  final TextStyle textStyleHover;
  final TextStyle textStyleSelected;
  final TextStyle textStyleDisabled;

  // Animation
  final Duration animationDuration;
  final Curve animationCurve;
}
// =============================================================================
// APPFLOWY SIDEBAR ITEM WIDGET
// =============================================================================

/// AppFlowy-style sidebar item widget with config-based styling
class SidebarItemWidget extends HookWidget {
  const SidebarItemWidget({
    required this.label,
    required this.icon,
    required this.config,
    required this.isItemSelected,
    this.onTap,
    super.key,
    this.isDisabled = false,
    this.showFocusRing = true,
    this.autofocus = false,
  });

  /// The text label for the sidebar item
  final String label;

  /// The icon widget to display
  final Widget icon;

  /// Configuration for styling and layout
  final SidebarItemWidgetConfig config;

  /// Callback when the item is tapped
  final VoidCallback? onTap;

  /// Whether this item is currently selected
  final bool isItemSelected;

  /// Whether this item is disabled
  final bool isDisabled;

  /// Whether to show focus ring when focused
  final bool showFocusRing;

  /// Whether this item should autofocus
  final bool autofocus;

  @override
  Widget build(BuildContext context) {
    final focusNode = useFocusNode();
    final isHovering = useState(false);
    final isFocused = useState(false);
    final isSelected = useState<bool>(isItemSelected);

    useEffect(() {
      isSelected.value = isItemSelected;
      return null;
    }, [
      isItemSelected,
    ]);

    
    return Actions(
      actions: {
        ActivateIntent: CallbackAction<ActivateIntent>(
          onInvoke: (_) {
            if (!isDisabled && onTap != null) {
              onTap!();
            }
            return null;
          },
        ),
      },
      child: Focus(
        focusNode: focusNode,
        onFocusChange: (focused) => isFocused.value = focused,
        autofocus: autofocus,
        child: MouseRegion(
          cursor: _getCursor(),
          onEnter: (_) => isHovering.value = true,
          onExit: (_) => isHovering.value = false,
          child: GestureDetector(
            onTap: isDisabled ? null : onTap,
            child: AnimatedContainer(
              duration: config.animationDuration,
              curve: config.animationCurve,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(config.borderRadius),
                border: isFocused.value && showFocusRing
                    ? Border.all(
                        color: config.focusRingColor,
                        width: 2,
                        strokeAlign: BorderSide.strokeAlignOutside,
                      )
                    : null,
              ),
              child: AnimatedContainer(
                duration: config.animationDuration,
                curve: config.animationCurve,
                decoration: BoxDecoration(
                  color: _getBackgroundColor(
                    isHovering.value,
                    isFocused.value,
                    isSelected.value,
                  ),
                  border: Border.all(
                    color: _getBorderColor(
                      isHovering.value,
                      isFocused.value,
                      isSelected.value,
                    ),
                  ),
                  borderRadius: BorderRadius.circular(config.borderRadius),
                ),
                child: Padding(
                  padding: config.padding,
                  child: Row(
                    children: [
                      AnimatedContainer(
                        duration: config.animationDuration,
                        curve: config.animationCurve,
                        child: IconTheme(
                          data: IconThemeData(
                            color: _getTextColor(
                              isHovering.value,
                              isFocused.value,
                              isSelected.value,
                            ),
                            size: config.iconSize,
                          ),
                          child: icon,
                        ),
                      ),
                      SizedBox(width: config.spacing),
                      Expanded(
                        child: AnimatedDefaultTextStyle(
                          duration: config.animationDuration,
                          curve: config.animationCurve,
                          style: _getTextStyle(
                            isHovering.value,
                            isFocused.value,
                            isSelected.value,
                          ),
                          child: Text(
                            label,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  SystemMouseCursor _getCursor() {
    if (onTap == null || isDisabled) {
      return SystemMouseCursors.basic;
    }
    return SystemMouseCursors.click;
  }

  Color _getBackgroundColor(bool hovering, bool focused, bool isSelected) {
    if (isDisabled) {
      return config.disabledBackgroundColor;
    }
    if (isSelected) {
      return config.selectedBackgroundColor;
    }
    if (hovering) {
      return config.hoverBackgroundColor;
    }
    return config.backgroundColor;
  }

  Color _getBorderColor(bool hovering, bool focused, bool isSelected) {
    if (isDisabled) {
      return config.disabledBorderColor;
    }
    if (isSelected) {
      return config.selectedBorderColor;
    }
    if (hovering) {
      return config.hoverBorderColor;
    }
    return config.borderColor;
  }

  Color _getTextColor(bool hovering, bool focused, bool isSelected) {
    if (isDisabled) {
      return config.disabledTextColor;
    }
    if (isSelected) {
      return config.selectedTextColor;
    }
    if (hovering) {
      return config.hoverTextColor;
    }
    return config.textColor;
  }

  TextStyle _getTextStyle(bool hovering, bool focused, bool isSelected) {
    if (isDisabled) {
      return config.textStyleDisabled;
    }
    if (isSelected) {
      return config.textStyleSelected;
    }
    if (hovering) {
      return config.textStyleHover;
    }
    return config.textStyleNormal;
  }
}

// =============================================================================
// REVIEW WORKFLOW
// =============================================================================

// After generating the refactored widget and its config class, ask for my confirmation.
// Once I reply with "yes" or another form of approval, you will then proceed
// to conduct a full review of the new widget based on the criteria below.

// Documentation Review
// 1. All instance variables (especially final, late, or configurable ones) must be documented using Dart-style 
/// doc comments that explain what the variable is, why it exists, and when/how it is used. 
This applies to all Flutter Widget classes, configuration classes (e.g., Theme, Spacing, Styles), 
state/data classes, and service-layer objects.


// API Design Review
2. Are the parameters named clearly and consistent with Flutter naming conventions?
3. Are default values sensible (e.g., spacing, colors, sizes)?
4. Are required vs optional parameters thoughtfully separated?
5. Do parameters support flexibility (e.g., Widget? prefix, EdgeInsets? padding)?
6. Are there overloads or factory constructors for common variations?

// Architecture Review
7. Is logic (state/mutations) separated from the UI?
8. Is the widget truly dumb/presentational?
9. Does it use the correct design tokens (colors, typography, padding)?
10. Does it align with global spacing, radius, border, and elevation rules?
11. Is this using hardcoded values?
12. Is the widget stateful/stateless for the right reason?
13. Does it unnecessarily depend on external state (like context.watch)?
14. Is it tightly coupled to any specific BLoC, provider, or cubit?

// Performance Review
15. Does it avoid unnecessary rebuilds (const, keys, memoization)?
16. Are heavy computations done outside build (useMemoized, initState)?
17. Does it use const constructors where possible?

// Code Quality Review
18. Are variable and class names clear and intentional?
19. Are helper methods extracted for readability?
20. Is indentation and formatting clean and consistent?
21. Are comments used where reasoning isn't obvious?
22. Are private variables/methods properly scoped?

// Error Handling Review
23. Does the widget handle all nullable scenarios gracefully?
24. Are defaults set to avoid runtime exceptions?

// Testing & Maintainability Review
25. Can the widget be tested in isolation?
26. Is logic separated to allow for unit or widget testing?
27. Can it be generalized or composed from smaller widgets?
28. Are internal helper widgets abstracted or hidden?
29. if i using somthing that need to be dispose do i do it 

Accessibility (a11y) Review
Is it screen-reader friendly? Widgets must be wrapped in a Semantics widget with an appropriate label and state (e.g., isChecked, isSelected) for screen readers.
Are tap targets large enough? Interactive areas must meet minimum size requirements (typically 48x48 logical pixels) to be easily usable for those with motor impairments.
Is there sufficient color contrast? Text and icon colors must have a high enough contrast ratio against their background to be legible for users with low vision.
Is it keyboard navigable? The widget must be focusable and interactive using only keyboard controls for desktop and web users.

Internationalization & Localization (i18n/l10n) Review
Are there any hardcoded strings? All user-facing text (labels, hints, etc.) must come from a localization provider, not be hardcoded in the widget.
Is the layout flexible for different languages? The UI must not break or overflow when text length changes significantly, as is common with translations.

Platform Adaptability Review
Is the layout responsive? The widget must adapt gracefully to different screen sizes and orientations (e.g., mobile, tablet, desktop).
Does it respect platform conventions? The widget should consider adapting its appearance or behavior to feel "native" on different platforms (iOS, Android, etc.) where appropriate.